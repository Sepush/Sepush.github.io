<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Start Blog</title>
    <link href="/2020/08/26/curring-partialaplication/"/>
    <url>/2020/08/26/curring-partialaplication/</url>
    
    <content type="html"><![CDATA[<h1 id="Currying-and-Partial-Application"><a href="#Currying-and-Partial-Application" class="headerlink" title="Currying and Partial Application"></a>Currying and Partial Application</h1><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>柯里化（Crrying）是把接受多个参数的函数变换成接受单一参数（最初函数的第一个参数）的函数，并且返回接受余下参数而且返回余下结果的新函数。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$$<br>f:X \rightarrow Y 表示从 X 映射到 Y 的函数 f \<br>X \rightarrow Y 表示从 X 到 Y 的所有函数 \<br>这里，X和Y可以是集合、或者类型、或者其他型别，如下所述。\<br>令X \times Y 表示有序对，即笛卡尔积 \<br>给定类型为 f:(X \times Y) \rightarrow Z 的函数 f ，柯里化即构造或创建一个新函数：\<br>curry(f): X \rightarrow ( Y \rightarrow Z) \<br>也就是说，curry(f) 取一个类型为 X 的参数，并返回一个类型为 Y \rightarrow Z 的函数。 \<br>Uncurring 则相反<br>$$</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>$$<br>例如有四个参数的函数：f(x,y,z,w)\<br>h_x = ((y,z,w)\mapsto f(x,y,z,w))\<br>h_x(y,z,w) = f(x,y,z,w)\<br>适当柯里化h=(x\mapsto ((y,z,w)\mapsto f(x,y,z,w)))\<br>继续 x\mapsto(y\mapsto (z\mapsto(w\mapsto f(x,y,z,w))))\<br>对于箭头符合的理解一般是右结合的，所以可以省略括号，常见的形式\<br>x \mapsto y \mapsto z \mapsto w \mapsto f(x,y,z,w) \<br>这就是函数f完全柯里化的形式<br>$$</p><h3 id="JavaScript实现Currying"><a href="#JavaScript实现Currying" class="headerlink" title="JavaScript实现Currying"></a>JavaScript实现Currying</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">func</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curried</span>(<span class="hljs-params">...args</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(args.length&gt;=func.length)&#123;<br>            <span class="hljs-keyword">return</span> func.apply(<span class="hljs-built_in">this</span>,args)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args2</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> curried.apply(<span class="hljs-built_in">this</span>,args.councat(args2))<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Partical-Application"><a href="#Partical-Application" class="headerlink" title="Partical Application"></a>Partical Application</h2><p>偏函数应用，指将一些参数固定到一个函数，从而产生更小的函数。</p><p>给定<br>$$<br>f:(X\times Y \times Z)\rightarrow N \<br>$$<br>我们固定第一个参数，产生一个函数<br>$$<br>partial(f):(Y\times Z)\rightarrow N<br>$$</p><h3 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h3><p>[1] <a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96">https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96</a></p><p>[2] <a href="https://en.wikipedia.org/wiki/Partial_application">https://en.wikipedia.org/wiki/Partial_application</a></p><p>[3] <a href="https://javascript.info/currying-partials">https://javascript.info/currying-partials</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git设置代理</title>
    <link href="/2020/07/30/github-Socket5-Proxy/"/>
    <url>/2020/07/30/github-Socket5-Proxy/</url>
    
    <content type="html"><![CDATA[<p>在国内从github上拉取项目实在是太慢了,就算你是千兆的网也就几十K的样子。之前我是使用的<code>gitee</code> 来中转，先把项目转到<code>gitee</code>再从<code>gitee</code>上拉取这很麻烦。前几天在群里看见朋友说可以设置 <code>git socks5 proxy</code>于是试了一下, 速度果然提升了有几M的速度我非常满意，基本上是够用了。</p><span id="more"></span><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">// 全局代理设置 端口号改成本机对应的 我使用了V2代理的默认端口<span class="hljs-number">10808</span><br>git config -<span class="hljs-literal">-global</span> https.proxy http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br>git config -<span class="hljs-literal">-global</span> https.proxy https://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br><br>// 为 github 单独设置<br>git config -<span class="hljs-literal">-global</span> http.https://github.com.proxy https://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br>git config -<span class="hljs-literal">-global</span> https.https://github.com.proxy https://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br><br>// Socks5<br>git config -<span class="hljs-literal">-global</span> http.https://github.com.proxy socks5://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br>git config -<span class="hljs-literal">-global</span> https.https://github.com.proxy socks5://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br><br>// 取消<br>git config -<span class="hljs-literal">-global</span> -<span class="hljs-literal">-unset</span> http.proxy<br>git config -<span class="hljs-literal">-global</span> -<span class="hljs-literal">-unset</span> https.proxy<br><br>// 查看已有设置<br>git config -<span class="hljs-literal">-global</span> <span class="hljs-literal">-l</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Start Blog</title>
    <link href="/2020/01/11/hello-blog/"/>
    <url>/2020/01/11/hello-blog/</url>
    
    <content type="html"><![CDATA[<p>使用 hexo + NexT 搭建blog</p><span id="more"></span><hr><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="配置blog"><a href="#配置blog" class="headerlink" title="配置blog"></a>配置blog</h3><p>1.安装node.js <a href="https://nodejs.org/en/">node.js</a><br>2.检查版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">node <span class="hljs-literal">-v</span> npm <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><p>3.利用nmp安装cnmp</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> cnpm -<span class="hljs-literal">-registry</span>=https://registry.npm.taobao.org<br>cnpm //检查是否安装好<br>cnpm <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><p>4.安装hexo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cnpm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span> // npm i <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br>hexo <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><p>5.初始化</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">//on windows<br><span class="hljs-built_in">chdir</span> //查看当前目录<br>mkdir blog / <span class="hljs-built_in">md</span> blog<br><span class="hljs-built_in">cd</span> blog<br>hexo init<br><span class="hljs-built_in">dir</span><br>hexo <span class="hljs-literal">-s</span> //可以在localhost:<span class="hljs-number">4000</span> 查看<br>hexo <span class="hljs-literal">-n</span> <span class="hljs-string">&quot;文件名&quot;</span><br><span class="hljs-built_in">chdir</span><br><span class="hljs-built_in">cd</span> source/_posts/<br><span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure><p>6.使用vs code 打开 要编辑的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> ../../   //回退两级目录<br>hexo clean //清理<br>hexo g //生成<br>hexo s //开始<br></code></pre></td></tr></table></figure><p>7.部署到GitHub</p><p>新建仓库 用户名.github.io<br>在blog目录下安装一个git插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cnpm install -<span class="hljs-literal">-save</span> hexo<span class="hljs-literal">-deployer</span><span class="hljs-literal">-git</span><br></code></pre></td></tr></table></figure><p>修改配置文件 _config.yml<br>在文件最底部 Deployment</p><pre><code>type: gitrepo: 仓库地址branch: master部署<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d <br></code></pre></td></tr></table></figure></code></pre><p>输入账号</p><p>输入密码</p><hr><h3 id="更换blog主题"><a href="#更换blog主题" class="headerlink" title="更换blog主题"></a>更换blog主题</h3><p>1.克隆主题</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git clone https://github.com/iissnan/hexo<span class="hljs-literal">-theme</span><span class="hljs-literal">-next</span> themes/next<br><br></code></pre></td></tr></table></figure><p>2.修改_config.yml</p><p>把theme：修改为next</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean<br>hexo g<br>hexo s<br>ctl + c<br>hexo d<br></code></pre></td></tr></table></figure><hr><p>完工惹 以后就可以愉快的写blog了(划水(误 前面划掉(之后会自己定制一套个人博客(先开一个坑 不知道什么时候填</p><hr>]]></content>
    
    
    
    <tags>
      
      <tag>epic</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
