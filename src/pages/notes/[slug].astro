---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const notes = await getCollection("notes");

  return notes.map((note) => ({
    params: { slug: note.slug },
    props: { note },
  }));
}

interface Props {
  note: CollectionEntry<"notes">;
}

const { note } = Astro.props as Props;
const { Content } = await note.render();

function formatDate(date: Date) {
  return new Intl.DateTimeFormat("zh-CN", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(date);
}

function formatTime(date: Date) {
  return new Intl.DateTimeFormat("zh-CN", {
    hour: "2-digit",
    minute: "2-digit",
  }).format(date);
}
---

<Layout title={`${note.data.title} - Artea`} description="随笔笔记">
  <div class="min-h-screen bg-gradient-primary">
    <div class="max-w-4xl mx-auto px-4 py-12">
      <nav class="mb-12">
        <a
          href="/notes"
          class="inline-flex items-center gap-2 text-primary-600 hover:text-primary-700 transition-all duration-200 group"
        >
          <span
            class="i-tabler-arrow-left group-hover:-translate-x-1 transition-transform duration-200"
          ></span>
          <span class="font-medium">返回笔记</span>
        </a>
      </nav>

      <article class="card-modern overflow-hidden">
        <header class="px-8 pt-8 pb-6">
          <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-6 leading-tight">
            {note.data.title}
          </h1>

          <div class="flex flex-wrap items-center gap-6 text-sm text-gray-600 mb-6">
            <div class="flex items-center gap-2">
              <span class="i-tabler-calendar w-4 h-4 text-primary-500"></span>
              <time
                datetime={note.data.pubDate.toISOString()}
                class="font-medium"
              >
                {formatDate(note.data.pubDate)}
              </time>
            </div>

            {
              note.data.mood && (
                <div class="flex items-center gap-2">
                  <span
                    class="i-tabler-mood-smile w-4 h-4 text-accent-500"
                  ></span>
                  <span class="font-medium">{note.data.mood}</span>
                </div>
              )
            }

            {
              note.data.location && (
                <div class="flex items-center gap-2">
                  <span
                    class="i-tabler-map-pin w-4 h-4 text-primary-400"
                  ></span>
                  <span class="font-medium">{note.data.location}</span>
                </div>
              )
            }

            <div class="flex items-center gap-2 ml-auto">
              <span class="i-tabler-clock w-4 h-4 text-gray-400"></span>
              <span>{formatTime(note.data.pubDate)}</span>
            </div>
          </div>

          {
            note.data.tags && note.data.tags.length > 0
              && (
              <div class="flex flex-wrap gap-2">
                {
                  note.data.tags.map((tag) => (
                    <span
                      class="px-3 py-1 bg-primary-50 text-primary-700 rounded-lg text-xs font-medium border border-primary-100"
                    >
                      #{tag}
                    </span>
                  ))
                }
              </div>
            )
          }
        </header>

        <div class="h-px bg-gradient-to-r from-transparent via-primary-200 to-transparent mx-8">
        </div>

        <div class="px-8 py-8">
          <div class="prose max-w-none">
            <Content />
          </div>
        </div>
      </article>
    </div>
  </div>
</Layout>


