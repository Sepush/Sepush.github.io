---
import { platformConfigs } from "./config";
import type { ShareLink, SocialPlatform } from "./interface";
import { createShareUrl } from "./utis";

type Size = "sm" | "md";
export interface Props {
  title: string;
  url: string;
  platforms?: SocialPlatform[];
  size?: Size;
  showLabels?: boolean;
  className?: string;
}

const {
  title,
  url,
  platforms = ["x"],
  size = "sm",
  showLabels = false,
  className = "",
} = Astro.props;

const shareLinks: ShareLink[] = platforms
  .filter((platform) => platformConfigs[platform])
  .map((platform) => {
    const config = platformConfigs[platform]!;
    return {
      ...config,
      url: createShareUrl(platform, title, url),
    };
  });

const sizeClasses = {
  sm: {
    button: "px-2 py-1 text-sm",
    icon: "text-sm",
  },
  md: {
    button: "px-3 py-2 text-md",
    icon: "text-md",
  },
};

function calcLinkClasses(link: ShareLink, size: Size) {
  return `flex items-center gap-1 ${link.color} text-white rounded transition-colors ${
    sizeClasses[size].button
  }`;
}
---

{
  shareLinks.length > 0 && (
    <div class={`flex items-center gap-3 ${className}`}>
      <span class={`text-gray-500 ${size === "sm" ? "text-sm" : "text-base"}`}>
        分享到：
      </span>
      <div class="flex items-center gap-2">
        {
          shareLinks.map((link) => {
            return (
              link && (
            <a
              href={link.url}
              target="_blank"
              rel="noopener noreferrer"
              class={calcLinkClasses(link, size)}
              title={`分享到 ${link.platform}`}
              aria-label={`Share on ${link.platform}`}
            >
              <span
                class={`${link.icon} ${sizeClasses[size].icon} text-gray-500`}
              />
              {showLabels && <span>{link.platform}</span>}
            </a>
          )
            );
          })
        }
      </div>
    </div>
  )
}
