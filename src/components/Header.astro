---
const pathname = Astro.url.pathname;

const navItems = [
  { name: "Home", href: "/", icon: "i-tabler-home" },
  { name: "Posts", href: "/posts", icon: "i-tabler-article" },
  { name: "Notes", href: "/notes", icon: "i-tabler-note" },
  { name: "Friends", href: "/friends", icon: "i-tabler-users" },
];
---

<header
  id="header"
  class="w-full bg-white/40 backdrop-blur-md sticky top-0 z-50 transition-all duration-300"
>
  <div class="max-w-6xl mx-auto px-6 py-1.5">
    <div class="flex items-center justify-between">
      <a class="flex items-center gap-4 hover:text-primary-600" href="/"
      >Artea</a>

      <nav class="hidden md:flex items-center gap-2">
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class={`group relative flex items-center gap-1 px-1 py-1 text-sm font-normal transition-all duration-300 ${
                pathname === item.href
                  ? "text-primary-700"
                  : "text-gray-600 hover:text-primary-600 hover:bg-white/30"
              }`}
            >
              <span
                class={`${item.icon} text-base transition-transform duration-300`}
              />
              <span>{item.name}</span>
            </a>
          ))
        }
      </nav>

      <button
        id="mobile-menu-button"
        class="md:hidden flex items-center justify-center w-8 h-8 rounded-lg bg-white/40 hover:bg-white/60 transition-all duration-300"
        aria-label="Toggle menu"
      >
        <span
          id="menu-icon"
          class="i-tabler-menu-2 text-base text-gray-600 transition-transform duration-300"
        ></span>
      </button>
    </div>
  </div>

  <div id="mobile-menu" class="hidden md:hidden bg-white/40 backdrop-blur-md">
    <nav class="max-w-6xl mx-auto px-6 py-1.5 space-y-0.5">
      {
        navItems.map((item) => (
          <a
            href={item.href}
            class={`mobile-menu-link relative flex items-center gap-2.5 px-3 py-1.5 text-sm font-normal transition-all duration-300 ${
              pathname === item.href
                ? "text-primary-700"
                : "text-gray-600 hover:text-primary-600 hover:bg-white/30"
            }`}
          >
            <span class={`${item.icon} text-base`} />
            <span>{item.name}</span>
          </a>
        ))
      }
    </nav>
  </div>
</header>

<script>
function initHeader() {
  const menuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const menuIcon = document.getElementById("menu-icon");
  const header = document.getElementById("header");

  if (!menuButton || !mobileMenu || !menuIcon || !header) return;

  let isMenuOpen = false;

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    mobileMenu!.classList.toggle("hidden", !isMenuOpen);
    menuIcon!.className = isMenuOpen
      ? "i-tabler-x text-base text-gray-600 transition-transform duration-300"
      : "i-tabler-menu-2 text-base text-gray-600 transition-transform duration-300";
    menuButton!.setAttribute("aria-expanded", String(isMenuOpen));
    menuButton!.setAttribute(
      "aria-label",
      isMenuOpen ? "Close menu" : "Open menu",
    );
  }

  function closeMenu() {
    if (isMenuOpen) {
      isMenuOpen = false;
      mobileMenu!.classList.add("hidden");
      menuIcon!.className =
        "i-tabler-menu-2 text-base text-gray-600 transition-transform duration-300";
      menuButton!.setAttribute("aria-expanded", "false");
      menuButton!.setAttribute("aria-label", "Open menu");
    }
  }

  function updateHeaderOnScroll() {
    const scrolled = window.scrollY > 10;
    header!.className = scrolled
      ? "w-full bg-white/70 backdrop-blur-md sticky top-0 z-50 transition-all duration-300 border-b border-white/20 shadow-sm"
      : "w-full bg-white/40 backdrop-blur-md sticky top-0 z-50 transition-all duration-300";
  }

  menuButton!.addEventListener("click", toggleMenu);

  document.querySelectorAll(".mobile-menu-link").forEach(link => {
    link.addEventListener("click", closeMenu);
  });

  document.addEventListener("click", (e) => {
    if (isMenuOpen && !header!.contains(e.target as Node)) {
      closeMenu();
    }
  });

  window.addEventListener("scroll", updateHeaderOnScroll);
  updateHeaderOnScroll();

  return () => {
    menuButton.removeEventListener("click", toggleMenu);
    document.querySelectorAll(".mobile-menu-link").forEach(link => {
      link.removeEventListener("click", closeMenu);
    });
    window.removeEventListener("scroll", updateHeaderOnScroll);
  };
}

let cleanup: (() => void) | undefined;

function setupHeader() {
  if (cleanup) cleanup();
  cleanup = initHeader();
}

setupHeader();
document.addEventListener("astro:after-swap", setupHeader);
</script>
