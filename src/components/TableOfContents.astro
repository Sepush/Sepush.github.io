---
interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: Heading[];
  maxDepth?: number;
  className?: string;
  position?: 'fixed' | 'static';
}

const {
  headings,
  maxDepth = 3,
  className = '',
  position = 'fixed'
} = Astro.props;

// 过滤标题，只保留指定深度以内的标题
const tocItems = headings.filter((h) => h.depth <= maxDepth);

// 生成位置相关的类名
const positionClasses = position === 'fixed' 
  ? 'fixed right-6 top-1/2 transform -translate-y-1/2 hidden xl:block z-10'
  : 'relative';
---

{tocItems.length > 0 && (
  <aside class={`${positionClasses} ${className}`}>
    <div class="toc-container bg-white/90 backdrop-blur-sm border border-green-200/60 rounded-lg p-4 shadow-md max-w-xs">
      <div class="flex items-center gap-2 mb-4 pb-3 border-b border-green-100">
        <div class="w-6 h-6 bg-gradient-to-br from-green-400 to-emerald-500 rounded-md flex items-center justify-center">
          <span class="i-tabler-list text-white text-xs"></span>
        </div>
        <span class="text-sm font-medium text-gray-700">目录</span>
      </div>
      
      <nav class="toc max-h-80 overflow-y-auto">
        <ul class="space-y-1">
          {tocItems.map((heading) => (
            <li class={`toc-level-${heading.depth}`}>
              <a 
                href={`#${heading.slug}`}
                class={`
                  block text-xs py-2 px-3 rounded-md transition-all duration-200 hover:bg-green-50 hover:text-green-700 line-clamp-2 
                  ${heading.depth === 1 ? 'font-medium text-gray-900 border-l-2 border-green-500 pl-4' :
                    heading.depth === 2 ? 'text-gray-700 ml-2 border-l-2 border-green-200 pl-3' :
                    'text-gray-600 ml-4 border-l-2 border-green-100 pl-3'}
                `}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  </aside>
)}

<style>
  /* 目录容器样式 */
  .toc-container {
    max-width: 280px;
    transition: all 0.2s ease;
  }

  /* 目录激活状态 */
  .toc a.active {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    border-color: transparent !important;
    font-weight: 500;
  }

  .toc a.active::before {
    content: '';
    position: absolute;
    left: -4px;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 20px;
    background: white;
    border-radius: 2px;
  }

  /* 滚动条样式 */
  .toc::-webkit-scrollbar {
    width: 4px;
  }

  .toc::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 2px;
  }

  .toc::-webkit-scrollbar-thumb {
    background: #10b981;
    border-radius: 2px;
  }

  .toc::-webkit-scrollbar-thumb:hover {
    background: #059669;
  }

  /* 响应式适配 */
  @media (max-width: 1279px) {
    .toc-container {
      max-width: 240px;
    }
  }

  @media (max-width: 768px) {
    .toc-container {
      max-width: 200px;
      font-size: 0.875rem;
    }
  }
</style>

<script>
  // 目录高亮和平滑滚动效果
  document.addEventListener('DOMContentLoaded', () => {
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    const tocLinks = document.querySelectorAll('.toc a');
    
    if (!headings.length || !tocLinks.length) return;
    
    // 添加 ID 到标题（如果没有的话）
    headings.forEach((heading, index) => {
      if (!heading.id) {
        heading.id = `heading-${index}`;
      }
    });

    // Intersection Observer 配置
    const observerOptions = {
      rootMargin: '-100px 0px -66%',
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // 移除所有高亮
          tocLinks.forEach(link => link.classList.remove('active'));
          
          // 添加当前标题的高亮
          const activeLink = document.querySelector(`.toc a[href="#${entry.target.id}"]`);
          if (activeLink) {
            activeLink.classList.add('active');
            
            // 确保活动链接在视口内
            const tocContainer = document.querySelector('.toc');
            if (tocContainer) {
              const linkRect = activeLink.getBoundingClientRect();
              const containerRect = tocContainer.getBoundingClientRect();
              
              if (linkRect.top < containerRect.top || linkRect.bottom > containerRect.bottom) {
                activeLink.scrollIntoView({
                  behavior: 'smooth',
                  block: 'nearest'
                });
              }
            }
          }
        }
      });
    }, observerOptions);
    
    // 观察所有标题
    headings.forEach(heading => {
      observer.observe(heading);
    });

    // 目录链接点击事件
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');
        if (href) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            // 平滑滚动到目标
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
            
            // 更新 URL（可选）
            if (history.pushState) {
              history.pushState(null, '', `#${targetId}`);
            }
          }
        }
      });
    });

    // 页面加载时检查 URL 中的锚点
    if (window.location.hash) {
      setTimeout(() => {
        const targetElement = document.querySelector(window.location.hash);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      }, 300);
    }

    // 监听浏览器后退/前进按钮
    window.addEventListener('popstate', () => {
      if (window.location.hash) {
        const targetElement = document.querySelector(window.location.hash);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      }
    });
  });
</script>
